bootable                       // this is not a regular source file, but a kernel
                               // (must be loaded by grub, qemu -kernel or similar)

extern kmain                   // the C function that is called when booting

fun fix
  // Make Fuccess! into Success!
  mem 0xb8000 = 83 // 'S'
end

fun main
    kmain                      // call the C function
    fix                        // the fix function
    halt                       // clear interrupts, halt and loop forever
end

inline_c

// thanks http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel
void kmain(void)
{
    char *msg = "Fuccess!";
    char *vidptr = (char*)0xb8000;  // video mem for text begins here.
    unsigned int i = 0;
    // clear all
    while(i < 80 * 25 * 2) {
        // blank character
        vidptr[i] = ' ';
        i++;
        // attribute-byte: light grey on black screen    
        vidptr[i] = 0x07;         
        i++;
    }
    // write the message to every second byte at 0xb8000
    for (i = 0; msg[i] != '\0'; i++) vidptr[i<<1] = msg[i];
    return;
}

end // inline_c

// vim: set syntax=c ts=4 sw=4 et:
