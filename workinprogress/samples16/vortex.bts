fun main
    // From: http://iquilezles.untergrund.net/media/rgba_pixelcoding.avi

    bh = 0x10
    ah = 0x4a
    int(21)

    ah = 0x48
    int(21)

    cs = ax
    bh = 0x20
    ah = 0x48
    int(21)

    es = ax
    bp = 0x01dd
    cl = 0xc8
    di = 0
    bx = 0xff60

    ax = cx
    ax -= 0x64

    //--- (asm 16) fild (bp+5) ---
    dx = bp
    dx += 5
    (asm 16) fild ptr word dx
    // ---

    //--- (asm 16) fild (bp+3) ---
    dx = bp
    dx += 3
    (asm 16) fild ptr word dx
    // ---

    (asm 16) fld st0
    (asm 16) fmul st0
    (asm 16) fld st2
    (asm 16) fmul st0
    (asm 16) faddp st1
    (asm 16) fsqrt

    //--- (asm 16) fidivr word ptr [bp+1] ---
    dx = bp
    dx++
    (asm 16) fidivr dx
    //---


    (asm 16) xes:
    (asm 16) fistp di
    (asm 16) fpatan
    (asm 16) fimul bp
    (asm 16) yes:
    di++
    (asm 16) fistp di
    di++
    bx++

    (asm 16) cmp bx, 0x009f
    (asm 16) jle 0x120

    ax = es
    ax += 0x28
    es = ax

    (asm 16) loop 0x011b

    al = cl

    (asm 16) xor al, ch
    bx = cx
    (asm 16) db 65
    (asm 16) mov [bx], al
    (asm 16) loop 0x015e
    cl = 0x10
    (asm 16) db 65
    (asm 16) add al, [bx]
    bl++
    bh++
    (asm 16) db 65
    (asm 16) add al, [bx]
    bh -= 2
    (asm 16) db 65
    (asm 16) add al, [bx]
    bh++
    (asm 16) db 0xc1
    (asm 16) call 0x6688
    (asm 16) mov [bx],al
    bx++
    (asm 16) jnz 0x016b
    (asm 16) loop 0x016b

    al = 0x13
    int(10)

    (asm 16) db 0x68
    //---(asm 16) add [bx+si+0x8807], ah---
    dx = bx
    (asm 16) add dx, si
    dx += 0x8807
    (asm 16) add [dx], ah
    //---
    (asm 16) db 0xc8
    dx = 0x3c8
    (asm 16) out dx, al
    dx++
    (asm 16) out dx, al
    (asm 16) out dx, al
    (asm 16) out dx, al
    (asm 16) loop 0x0195

end

// vim: set syntax=c ts=4 sw=4 et:
