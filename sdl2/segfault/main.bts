const initsdl = "Initializing the SDL 2 video subsystem..."
const sleeping = "Sleeping for 1000 milliseconds..."
const done = "done.", 10
const helloworld = "Hello World!", 0
const window = "Creating a window..."
const err = "ERROR\n"
const read_binary = "rb", 0
const filename = "boxes.bmp", 0
const alldone = "All done!\n"
const hepp = "hepp\n"

extern SDL_Init
extern SDL_Delay
extern SDL_CreateWindow
extern SDL_CreateRenderer
extern SDL_RWFromFile
extern SDL_LoadBMP_RW
extern SDL_CreateTextureFromSurface
extern SDL_FreeSurface
extern SDL_RenderClear
extern SDL_RenderCopy
extern SDL_RenderPresent
extern SDL_DestroyTexture
extern SDL_DestroyRenderer
extern SDL_DestroyWindow

fun main

    // --- Initialize SDL2 ---

    write(initsdl)
    funparam[0] = 0x32  // SDL_INIT_TIMER | SDL_INIT_VIDEO   // 0x7231 = SDL_INIT_EVERYTHING
    call SDL_Init
    write(done)

    // --- Create a window ---

    funparam[0] = helloworld    // window title
    a = 100
    funparam[1] = a             // x = 100
    funparam[2] = a             // y = 100
    funparam[3] = 960           // width = 960
    funparam[4] = 540           // height = 540
    funparam[5] = 4             // SDL_WINDOW_SHOWN
    call SDL_CreateWindow

    // Pointer to SDL_Window is now in a. Save it and check if it is 0.
    a -> stack
    a == 0
        write(err)
        exit
    end

    // STACK: *SDL_Window

    // --- Create a renderer ---

    // Fetch the SDL_Window pointer from the stack and put it back
    stack -> a
    a -> stack

    funparam[0] = a             // the pointer to the SDL_Window
    funparam[1] = 0-1             // not sure if this Nasm-workaround is neede for Yasm. Want -1!
    funparam[2] = 0x1          // software   // 0x6 = SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC
    call SDL_CreateRenderer

    write(hepp)

    // Pointer to SDL_Renderer is now in a. Save it and check if it is 0.
    a -> stack
    a == 0
        write(err)
        exit
    end

    // STACK: *SDL_Window, *SDL_Renderer
    
    // --- Load the BMP file ---

    funparam[0] = filename      // The filename
    funparam[1] = read_binary   // Read the file as "rb"
    call SDL_RWFromFile         // Return a pointer to the file in a

    funparam[0] = a             // First parameter to SDL_LoadBMP_RW is the file pointer.
    funparam[1] = 1             // The second parameter to SDL_LoadBMP_RW is 1 (ref SDL_surface.h)
    call SDL_LoadBMP_RW

    // Pointer to the SDL_Surface is now in a. Save it and check if it is 0.
    a -> stack
    a == 0
        write(err)
        exit
    end

    // STACK: *SDL_Window, *SDL_Renderer, *SDL_Surface

    // --- Create a texture ---

    // First argument is the renderer
    stack -> b
    stack -> a
    funparam[1] = a
    a -> stack
    // b -> stack               // Remove the *SDL_Surface from the stack by not doing this

    // Second argument is the surface
    funparam[0] = b

    call SDL_CreateTextureFromSurface

    // Pointer to the SDL_Texture is now in a. Save it and check if it is 0.
    a -> stack
    a == 0
        write(err)
        exit
    end

    // STACK: *SDL_Window, *SDL_Renderer, *SDL_Texture

    // --- Free the SDL_Surface ---

    // The *SDL_Surface should still be in b
    funparam[0] = b
    call SDL_FreeSurface

    // --- Clear the renderer ---

    stack -> b                  // Fetch the texture
    stack -> a                  // Fetch the renderer
    funparam[0] = a             // First parameter is the *SDL_Renderer
    a -> stack                  // Put back the renderer
    b -> stack                  // Put back the texture
    call SDL_RenderClear

    // --- Copy the texture to the renderer

    stack -> a                  // Fetch the texture
    funparam[1] = a             // Use as the second parameter
    stack -> b                  // Fetch the renderer
    funparam[0] = b             // Use as the first parameter
    b -> stack                  // Put back the renderer
    a -> stack                  // Put back the texture

    funparam[2] = 0             // Third parameter is NULL
    funparam[3] = funparam[2]   // Fourth parameter is NULL

    call SDL_RenderCopy

    // --- Present the renderer ---

    stack -> b                  // Fetch the texture
    stack -> a                  // Fetch the renderer
    funparam[0] = a             // First parameter is the renderer
    a -> stack                  // Put back the renderer
    b -> stack                  // put back the texture

    // Wait 2 seconds
    write(sleeping)
    funparam[0] = 2000
    call SDL_Delay
    write(done)

    write(alldone)
end

// vim: set syntax=c ts=4 sw=4 et:

